ggplot(final.data, aes(final.data$high_use,final.data$prediction)) + geom_roc() + geom_rocci()
ggplot(melt_roc(final.data, "high_use", c(final.data$prediction, chosen.data$prediction)),
aes(d = D, m = M, color = name)) +
geom_roc() +
style_roc()
blah <- cbind(final.data$high_use, final.data$prediction, chosen.data$prediction)
blah <- as.data.frame(cbind(final.data$high_use, final.data$prediction, chosen.data$prediction))
View(blah)
colnames(blah) <- c("high_use", "final_mod_pred", "chosen_mod_pred")
View(blah)
ggplot(melt_roc(blah, blah$high_use, c(blah$final_mod_pred, blah$chosen_mod_pred)), aes(d = D, m = M, color = name)) + geom_roc() + style_roc()
ggplot(melt_roc(blah, blah$high_use, c(blah$final_mod_pred, blah$chosen_mod_pred)), aes(d = final_mod_pred, m = chosen_mod_pred, color = name)) + geom_roc() + style_roc()
ggplot(melt_roc(blah, "high_us"e, c("final_mod_pred", "chosen_mod_pred")), aes(d = final_mod_pred, m = chosen_mod_pred, color = name)) + geom_roc() + style_roc()
ggplot(melt_roc(blah, "high_use", c("final_mod_pred", "chosen_mod_pred")), aes(d = final_mod_pred, m = chosen_mod_pred, color = name)) + geom_roc() + style_roc()
ggplot(melt_roc(blah, "high_use", c("final_mod_pred", "chosen_mod_pred")), aes(d = "final_mod_pred", m = "chosen_mod_pred", color = name)) + geom_roc() + style_roc()
ggplot(melt_roc(blah, "high_use", c("final_mod_pred", "chosen_mod_pred")), aes(d = "final_mod_pred", m = "chosen_mod_pred", color = name)) + geom_roc()
ggplot(melt_roc(blah, "high_use", c("final_mod_pred", "chosen_mod_pred")), aes(d = "final_mod_pred", m = "chosen_mod_pred", color = name))
ggplot(melt_roc(blah, "high_use", c("final_mod_pred", "chosen_mod_pred")), aes(d = "final_mod_pred", m = "chosen_mod_pred", color = name))
ggplot(melt_roc(blah, "high_use", c("final_mod_pred", "chosen_mod_pred")), aes(d = "final_mod_pred", m = "chosen_mod_pred", color = name)) + geom_roc()
ggplot(melt_roc(blah, "high_use", c("final_mod_pred", "chosen_mod_pred")), aes(d = "final_mod_pred", m = "chosen_mod_pred", color = name)) + geom_roc() + style_roc()
kabala <- read.table("~/Downloads/Untitled.rtf")
library(readxl)
Untitled <- read_excel("Downloads/Untitled.xlsx",
col_names = FALSE)
View(Untitled)
read.table(Untitled, "~/Downloads/Untitled.txt", row.names = FALSE, col.names = FALSE)
library(readxl)
Untitled <- read_excel("Downloads/Untitled.xlsx",
col_names = FALSE)
View(Untitled)
rm(list = ls())
################################ DATA WRANGLING #################################
# Read Data
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv",
stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv",
stringsAsFactors = F, na.strings = "..")
# Data description & summary
str(hd)
summary(hd)
str(gii)
summary(gii)
# Variable renaming for both datasets
colnames(hd) <- c("Rank" , "Country", "HDindex" , "Life.expectancy", "Exp.school.years",
"Mean.school.yrs", "GNIncome", "GNI.minus.Rank")
colnames(gii) <- c("Rank" , "Country", "GIindex" , "Mat.Mort.Rate", "Adol.Birth.Rate",
"Rep.Parliament(%)", "FSec.edu", "MSec.edu",
"FLab.Rate", "MLab.Rate")
# Mutate the “Gender inequality” data and create two new variables.
gii <- gii %>% mutate(Edu.F2M = FSec.edu/MSec.edu,
Lab.F2M = FLab.Rate/MLab.Rate)
# Join together the two datasets using the variable Country as the identifier.
human <- inner_join(hd, gii, by = "Country")
# Set working directory & save file
setwd("~/Documents/GitHub/IODS-project")
getwd()
write.table(human, "~/Documents/GitHub/IODS-project/data/human.txt",
sep = "\t", row.names = FALSE)
library("readxl")
library("ggplot2")
library("data.table")
library("dplyr")
library("stringr")
library("tidyr")
library("GGally")
library("ggplot2")
library("MASS")
library("corrplot")
library("plotly")
# Read Data
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv",
stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv",
stringsAsFactors = F, na.strings = "..")
# Data description & summary
str(hd)
summary(hd)
str(gii)
summary(gii)
# Variable renaming for both datasets
colnames(hd) <- c("Rank" , "Country", "HDindex" , "Life.expectancy", "Exp.school.years",
"Mean.school.yrs", "GNIncome", "GNI.minus.Rank")
colnames(gii) <- c("Rank" , "Country", "GIindex" , "Mat.Mort.Rate", "Adol.Birth.Rate",
"Rep.Parliament(%)", "FSec.edu", "MSec.edu",
"FLab.Rate", "MLab.Rate")
# Mutate the “Gender inequality” data and create two new variables.
gii <- gii %>% mutate(Edu.F2M = FSec.edu/MSec.edu,
Lab.F2M = FLab.Rate/MLab.Rate)
# Join together the two datasets using the variable Country as the identifier.
human <- inner_join(hd, gii, by = "Country")
# Set working directory & save file
setwd("~/Documents/GitHub/IODS-project")
getwd()
write.table(human, "~/Documents/GitHub/IODS-project/data/human.txt",
sep = "\t", row.names = FALSE)
################################ WEEK 5 #################################
# Data description & summary
summary(human)
glimpse(human)
# Read Data
dat  <- read.table( "~/Documents/GitHub/IODS-project/data/human.txt", header = T, as.is = T )
View(dat)
dat$GNIncome <- as.numeric(as.character(dat$GNIncome))
dat$GNIncome
dat  <- read.table( "~/Documents/GitHub/IODS-project/data/human.txt", header = T, as.is = T )
is.na(dat$GNIncome)
glimpse(dat)
dat$GNIncome <- gsub(",","",dat$GNIncome)
glimpse(dat)
# Conbverting factors to numeric
dat$GNIncome <- as.numeric(as.character(dat$GNIncome))
glimpse(dat)
colnames(dat)
needed <- c("Country", "Edu.F2M", "Lab.F2M", "Exp.school.years", "Life.expectancy",
"GNIncome", "Mat.Mort.Rate", "Adol.Birth.Rate", "Rep.Parliament...")
new_dat <- dat[, colnames(dat) %in% needed]
View(new_dat)
# Remove all rows with missing values
new_dat <- drop_na(dat)
View(new_dat)
apply(new_dat, 1, function(x){any(is.na(x))})
length(apply(new_dat, 1, function(x){any(is.na(x))}))
length(apply(new_dat, 1, function(x){any(is.na(x))}) == TRUE)
sum(apply(new_dat, 1, function(x){any(is.na(x))}) == TRUE)
sum(apply(new_dat, 1, function(x){any(is.na(x))}) == FALSE)
ncol(new_dat)
needed <- c("Country", "Edu.F2M", "Lab.F2M", "Exp.school.years", "Life.expectancy",
"GNIncome", "Mat.Mort.Rate", "Adol.Birth.Rate", "Rep.Parliament...")
new_dat <- dat[, colnames(dat) %in% needed]
# Remove all rows with missing values
new_dat <- drop_na(new_dat)
# Check whether rows contain any zeros
sum(apply(new_dat, 1, function(x){any(is.na(x))}) == TRUE)
ncol(new_dat)
nrow(new_dat)
n <- dim(new_dat)[1]
dim(new_dat)[1]
# Removing last 7 rows
humans2 <- humans2[1:(n-7), ]
# Removing last 7 rows
humans2 <- new_dat[1:(n-7), ]
# Countries as rows
rownames(humans2) <- humans2$Country
View(humans2)
humans2 <- humans2[, -1]
# Set working directory & save file
setwd("~/Documents/GitHub/IODS-project")
getwd()
write.table(humans2, "~/Documents/GitHub/IODS-project/data/humans2.txt",
sep = "\t", row.names = FALSE)
analysis.data <- read.table("~/Documents/GitHub/IODS-project/data/humans2.txt",
header=TRUE)
View(analysis.data)
# Set working directory & save file
setwd("~/Documents/GitHub/IODS-project")
getwd()
write.table(humans2, "~/Documents/GitHub/IODS-project/data/humans2.txt",
sep = "\t", row.names = TRUE)
analysis.data <- read.table("~/Documents/GitHub/IODS-project/data/humans2.txt",
header=TRUE)
View(analysis.data)
n <- dim(new_dat)[1]
# Removing last 7 rows
humans2 <- new_dat[1:(n-7), ]
# Countries as rows
# Remove whitespace in Country variable
humans2$Country <- gsub('\\s+', '', humans2$Country)
View(humans2)
# Countries as rows
# Remove whitespace in Country variable
humans2$Country <- gsub('\\s+', '', humans2$Country)
View(humans2)
trimws(humans2$Country, which ="right", whitespace = "[ \t\r\n]")
View(humans2)
trimws(humans2$Country, which ="right")
humans2$Country <- trimws(humans2$Country, which ="right")
View(humans2)
humans2 <- new_dat[1:(n-7), ]
# Countries as rows
rownames(humans2) <- humans2$Country
humans2 <- humans2[, -1]
# Set working directory & save file
setwd("~/Documents/GitHub/IODS-project")
getwd()
write.table(humans2, "~/Documents/GitHub/IODS-project/data/humans2.txt",
sep = "\t", row.names = TRUE)
analysis.data <- read.table("~/Documents/GitHub/IODS-project/data/humans2.txt",
header=TRUE)
glimpse(analysis.data)
# General summary of the dataset
summary(analysis.data)
# Matrix of the variables
pairs(analysis.data)
# Correlation matrix
cor_matrix <- cor(analysis.data) %>% round(2)
corrplot(cor_matrix, method = "circle", type = "upper",
cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
analysis.data %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
library("purrr")
analysis.data %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
analysis.data %>% keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) + facet_wrap(~ key, scales = "free") + geom_histogram()
# Principal component analysis (with the SVD method)
pca_human <- prcomp(humans2)
summary(pca_human)
# Draw a biplot of the principal component representation and the original variables
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
biplot(pca_human, choices = 1:2, cex = c(1.2, 2), col = c("grey40", "deeppink2"))
biplot(pca_human, choices = 1:2, expand=10, cex = c(1.2, 2), col = c("grey40", "deeppink2"))
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), expand=10)
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), expand=20)
PCbiplot <- function(pca_human, x="PC1", y="PC2", colors=c('black', 'black', 'red', 'red')) {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.4, size=3, aes(label=obsnames), color=colors[1])
plot <- plot + geom_hline(aes(0), size=.2) + geom_vline(aes(0), size=.2, color=colors[2])
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color=colors[3])
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color=colors[4])
plot
}
PCbiplot <- function(PC, x="PC1", y="PC2", colors=c('black', 'black', 'red', 'red')) {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.4, size=3, aes(label=obsnames), color=colors[1])
plot <- plot + geom_hline(aes(0), size=.2) + geom_vline(aes(0), size=.2, color=colors[2])
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color=colors[3])
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color=colors[4])
plot
}
fit <- prcomp(humans2, scale=T)
PCbiplot(fit, colors=c("black", "black", "red", "yellow"))
PCbiplot(fit,  choices = 1:2, colors=c("black", "black", "red", "yellow"))
PCbiplot <- function(PC, x="PC1", y="PC2", colors=c('black', 'black', 'red', 'red')) {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.4, size=3, aes(label=obsnames), color=colors[1])
plot <- plot + geom_hline(aes(0), size=.2) + geom_vline(aes(0), size=.2, color=colors[2])
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color=colors[3])
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color=colors[4])
plot
}
fit <- prcomp(humans2, scale=T)
fit
summary(fit)
fit <- prcomp(humans2, scale=F)
summary(fit)
PCbiplot(fit,  choices = 1:2, colors=c("black", "black", "red", "yellow"))
PCbiplot(fit, colors=c("black", "black", "red", "yellow"))
View(humans2)
ggbiplot(fit, labels =  rownames(humans2))
library(ggbiplot)
install.packages("ggbiplot")
install.packages("ggbiplot", repos = "http://r.findata.org")
library(devtools)
install_github("vqv/ggbiplot")
ggbiplot(fit, labels =  rownames(humans2))
library(ggbiplot)
ggbiplot(fit, labels =  rownames(humans2))
ggbiplot(fit, obs.scale = 1, var.scale = 1, labels =  rownames(humans2))
ggbiplot(fit,  ellipse = TRUE, circle = TRUE, labels =  rownames(humans2))
ggbiplot(fit,  ellipse = TRUE, labels =  rownames(humans2))
ggbiplot(fit,  ellipse = TRUE, labels =  rownames(humans2)) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca_human,  ellipse = TRUE, labels =  rownames(humans2)) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca_human,  choices=c(1,2), ellipse = TRUE, labels =  rownames(humans2)) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca_human,  choices=c(1,2), ellipse = TRUE, labels =  rownames(humans2)) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
# Standardize dataset
humans2_std <- scale(humans2)
# PCA
pca_human_std <- prcomp(humans2_std)
ggbiplot(pca_human_std,  choices=c(1,2), ellipse = TRUE, labels =  rownames(humans2)) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca_human_std,  choices=c(1,2), ellipse = TRUE, labels =  rownames(humans2)) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca_human_std,  choices=c(3,4), ellipse = TRUE, labels =  rownames(humans2)) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
pca_human
pca_human_std
summary(pca_human_std)
summary(pca_human)
plot(pca_human, type = "l")
plot(pca_human, type = "l")
plot(pca_human_std, type = "l")
theta <- seq(0,2*pi,length.out = 100)
circle <- data.frame(x = cos(theta), y = sin(theta))
p <- ggplot(circle,aes(x,y)) + geom_path()
theta <- seq(0,2*pi,length.out = 100)
circle <- data.frame(x = cos(theta), y = sin(theta))
p <- ggplot(circle,aes(x,y)) + geom_path()
loadings <- data.frame(pca_human$rotation,
.names = row.names(pca_human$rotation))
p + geom_text(data=loadings,
mapping=aes(x = PC1, y = PC2, label = .names, colour = .names)) +
coord_fixed(ratio=1) +
labs(x = "PC1", y = "PC2")
theta <- seq(0,2*pi,length.out = 100)
circle <- data.frame(x = cos(theta), y = sin(theta))
p <- ggplot(circle,aes(x,y)) + geom_path()
loadings <- data.frame(pca_human_std$rotation,
.names = row.names(pca_human_std$rotation))
p + geom_text(data=loadings,
mapping=aes(x = PC1, y = PC2, label = .names, colour = .names)) +
coord_fixed(ratio=1) +
labs(x = "PC1", y = "PC2")
plot(pca_human_std, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
plot(pca_human_std, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
plot(pca_human_std, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "l")
#compute standard deviation of each principal component
std_dev <- pca_human_std$sdev
prop_varex <- pr_var/sum(pr_var)
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
library("gridExtra")
install.packages("gridExtra")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("lattice")
library("gridExtra")
library("grid")
library("lattice")
# Scree plot
PVEplot <- plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
# Cumulative scree plot
cumPVE <- plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
grid.arrange(PVEplot, cumPVE, ncol = 2)
prop_varex
summary(pca_human)
summary(pca_human_std)
pca_human_std
install.packages("FactoMineR")
library("FactoMineR")
pca_human_std
summary(pca_human_std)
tea <- read.table("http://factominer.free.fr/book/tea.csv",header=TRUE,sep=";")
View(tea)
data(tea)
View(tea)
colnames(tea)
# Select few variables
keep <- c("Tea", "frequency", "sex", "How", "relaxing", "effect.on.health")
tea_select <- dplyr::select(tea, one_of(keep))
install.packages("tidyverse")
gather(tea_select) %>%
ggplot(aes(value))  +
geom_bar()
gather(tea_select) %>%
ggplot(aes(value))  +
geom_bar()
library(tidyverse)
gather(tea_select) %>%
ggplot(aes(value))  +
geom_bar()
data(tea)
keep <- c("Tea", "frequency", "sex", "How", "relaxing", "effect.on.health")
tea_select <- dplyr::select(tea, one_of(keep))
gather(tea_select) %>%
ggplot(aes(value))  +
geom_bar()
gather(tea_select) %>%
ggplot(aes(value)) +
facet_wrap("key", scales = "free") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
geom_bar()
# Visualise distributions of the variables
gather(tea_select) %>%
ggplot(aes(value)) +
facet_wrap("key", scales = "free") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
geom_bar()
gather(tea_select) %>%
ggplot(aes(value)) +
facet_wrap("key", scales = "free") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
geom_bar()
tea_mca <- MCA(tea_time, graph = FALSE)
tea_mca <- MCA(tea_select, graph = FALSE)
summary(tea_mca)
# Plotting MCA
plot(tea_mca, invisible=c("ind"), habillage = "quali")
# Description on the dimension of MCA:
dimdesc(tea_mca)
dimdesc(tea_mca)
# Plotting MCA
plot(tea_mca, invisible=c("ind"), habillage = "quali")
# Name - Shabbeer Hassan
# Date - 02 Dec 2018
# This is the week 5 work in the IODS course.
# Data source:  http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt
################################ DATA WRANGLING #################################
# Read Data
dat  <- read.table( "~/Documents/GitHub/IODS-project/data/human.txt", header = T, as.is = T )
# Data description & summary
summary(dat)
glimpse(dat)
# Observations: 195
# Variables: 19
# Rank = HDI Rank of the countries
# Country
# HDindex = Computed HD index for each country used for ranking
# Life.expectancy =  Life Expectancy of each countries citizens
# Exp.school.years = Expected years of education of citizens living in the country
# Mean.school.yrs = Average years of education of citizens living in the country
# GNIncome = Gross Income of each country
# GNI.minus.Rank = Difference of GNI and HDI Rank
# Rank.y = Computed GI index for each country used for ranking
# GIindex = Gender Inequality index by country
# Mat.Mort.Rate = Maternal mortality rate
# Adol.Birth.Rate = Adolescent mortality Rate
# Rep.Parliament(%) = Percetange of female representatives in parliament
# FSec.edu = Proportion of females with at least secondary education
# MSec.edu = Proportion of males with at least secondary education
# Flab.Rate = Proportion of females in the labour force
# Mlab.Rate = Proportion of males in the labour force
# Edu.F2M = FSec.edu/MSec.edu
# Lab.F2M = FLab.Rate/MLab.Rate
# Mutate the data: transform the Gross National Income (GNI) variable to numeric
# First making factors "clean"
dat$GNIncome <- gsub(",","",dat$GNIncome)
# Converting factors to numeric
dat$GNIncome <- as.numeric(as.character(dat$GNIncome))
# Exclude unneeded variables
needed <- c("Country", "Edu.F2M", "Lab.F2M", "Exp.school.years", "Life.expectancy",
"GNIncome", "Mat.Mort.Rate", "Adol.Birth.Rate", "Rep.Parliament...")
new_dat <- dat[, colnames(dat) %in% needed]
# Remove all rows with missing values
new_dat <- drop_na(new_dat)
# Check whether rows contain any zeros
sum(apply(new_dat, 1, function(x){any(is.na(x))}) == TRUE)
# Remove the observations which relate to regions instead of countries
# We see that last 7 rows have data for regions than countries
# Finding rows
n <- dim(new_dat)[1]
# Removing last 7 rows
humans2 <- new_dat[1:(n-7), ]
# Countries as rows
rownames(humans2) <- humans2$Country
humans2 <- humans2[, -1]
# Set working directory & save file
setwd("~/Documents/GitHub/IODS-project")
getwd()
write.table(humans2, "~/Documents/GitHub/IODS-project/data/humans2.txt",
sep = "\t", row.names = TRUE)
rm(list = ls())
analysis.data <- read.table("~/Documents/GitHub/IODS-project/data/humans2.txt",
header=TRUE)
